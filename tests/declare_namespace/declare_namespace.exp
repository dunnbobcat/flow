Error ------------------------------------------------------------------------------------- flow-typed/namespaces.js:8:8

Cannot declare the name in the namespace because the name `a` [1] is already bound. [signature-verification-failure]

   flow-typed/namespaces.js:8:8
   8|   type a = string; // error: already bound
             ^

References:
   flow-typed/namespaces.js:2:17
   2|   declare const a: string;
                      ^ [1]


Error ------------------------------------------------------------------------------------- flow-typed/namespaces.js:9:8

Cannot declare the name in the namespace because the name `b` [1] is already bound. [signature-verification-failure]

   flow-typed/namespaces.js:9:8
   9|   type b = string; // error: already bound
             ^

References:
   flow-typed/namespaces.js:5:17
   5|   declare const b: string;
                      ^ [1]


Error ---------------------------------------------------------------------------------------------- binding_test.js:2:6

Cannot declare `conflict_with_type_decl_1` [1] because the name is already bound. [name-already-bound]

   binding_test.js:2:6
   2| type conflict_with_type_decl_1 = 1; // error
           ^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   binding_test.js:1:19
   1| declare namespace conflict_with_type_decl_1 {}
                        ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- binding_test.js:4:19

Cannot declare `conflict_with_type_decl_2` [1] because the name is already bound. [name-already-bound]

   binding_test.js:4:19
   4| declare namespace conflict_with_type_decl_2 {} // error
                        ^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   binding_test.js:3:6
   3| type conflict_with_type_decl_2 = 1;
           ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- binding_test.js:7:19

Cannot declare `const_like` [1] because the name is already bound. [name-already-bound]

   binding_test.js:7:19
   7| declare namespace const_like {} // error
                        ^^^^^^^^^^

References:
   binding_test.js:6:19
   6| declare namespace const_like {}
                        ^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- binding_test.js:8:1

Cannot use type-only namespace `const_like` [1] as a value. Type-only namespaces are erased and don't exist at runtime.
[type-as-value]

   binding_test.js:8:1
   8| const_like = 1; // error
      ^^^^^^^^^^

References:
   binding_test.js:6:19
   6| declare namespace const_like {}
                        ^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- binding_test.js:9:7

Cannot declare `const_like` [1] because the name is already bound. [name-already-bound]

   binding_test.js:9:7
   9| const const_like = 1; // error
            ^^^^^^^^^^

References:
   binding_test.js:6:19
   6| declare namespace const_like {}
                        ^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------ declare_global_binding.js:1:9

`declare global` statement is not supported yet. [unsupported-syntax]

   1| declare global {
              ^^^^^^


Error ------------------------------------------------------------------------------------ declare_global_binding.js:1:9

You are using an undocumented feature. It might be removed in the future, and the behavior might change at any time
without warning. [undocumented-feature]

   1| declare global {
              ^^^^^^


Error ------------------------------------------------------------------------------------ declare_global_binding.js:5:1

Cannot resolve name `foo`. [cannot-resolve-name]

   5| foo; // error: declare global doesn't affect global lookup for now
      ^^^


Error -------------------------------------------------------------------------------------------------- exported.js:9:3

Cannot use if statements with in `declare namespace`. The statement will be ignored. [unsupported-syntax]

   9|   if (true) {} // unsupported
        ^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------- exported.js:12:3

Cannot use value export statements with in `declare namespace`. The statement will be ignored. [unsupported-syntax]

   12|   export const CONSTANT = 'foo'; // unsupported
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------- exported.js:13:3

Cannot use export default statements with in `declare namespace`. The statement will be ignored. [unsupported-syntax]

   13|   export default CONSTANT; // unsupported
         ^^^^^^^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------- exported.js:14:3

Cannot use declare module.exports statements with in `declare namespace`. The statement will be ignored.
[unsupported-syntax]

   14|   declare module.exports: {foo: string}; // unsupported
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------- exported.js:14:3

Unable to determine module type (CommonJS vs ES) if both an export statement and `module.exports` are used in the same
module! [module-type-conflict]

   14|   declare module.exports: {foo: string}; // unsupported
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------- exported.js:15:3

Cannot use import declaration statements with in `declare namespace`. The statement will be ignored.
[unsupported-syntax]

   15|   import React from 'react'; // unsupported
         ^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------- exported.js:26:3

Cannot use type-only namespace `empty` [1] as a value. Type-only namespaces are erased and don't exist at runtime.
[type-as-value]

   exported.js:26:3
   26|   empty, // error: empty is type-only
         ^^^^^

References:
   exported.js:18:19
   18| declare namespace empty {}
                         ^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- exported.js:31:1

Cannot cast `exported_ns.bar1` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   exported.js:31:1
   31| exported_ns.bar1 as empty; // error: number ~> empty
       ^^^^^^^^^^^^^^^^

References:
   exported.js:2:30
    2|   declare export const bar1: number;
                                    ^^^^^^ [1]
   exported.js:31:21
   31| exported_ns.bar1 as empty; // error: number ~> empty
                           ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- exported.js:32:1

Cannot cast `exported_ns.bar2` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   exported.js:32:1
   32| exported_ns.bar2 as empty; // error: boolean ~> empty
       ^^^^^^^^^^^^^^^^

References:
   exported.js:3:23
    3|   declare const bar2: boolean;
                             ^^^^^^^ [1]
   exported.js:32:21
   32| exported_ns.bar2 as empty; // error: boolean ~> empty
                           ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- exported.js:33:1

Cannot cast `exported_ns.bar3` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   exported.js:33:1
   33| exported_ns.bar3 as empty; // error: string ~> empty
       ^^^^^^^^^^^^^^^^

References:
   exported.js:4:21
    4|   declare var bar3: string;
                           ^^^^^^ [1]
   exported.js:33:21
   33| exported_ns.bar3 as empty; // error: string ~> empty
                           ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- exported.js:34:1

Cannot cast `exported_ns.f(...)` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   exported.js:34:1
   34| exported_ns.f(3) as empty; // error: number ~> empty
       ^^^^^^^^^^^^^^^^

References:
   exported.js:6:31
    6|   declare function f(number): number;
                                     ^^^^^^ [1]
   exported.js:34:21
   34| exported_ns.f(3) as empty; // error: number ~> empty
                           ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- exported.js:35:1

Cannot cast `1` to `Baz` because number [1] is incompatible with string [2]. [incompatible-cast]

   exported.js:35:1
   35| 1 as exported_ns.Baz; // error: number ~> string
       ^ [1]

References:
   exported.js:35:6
   35| 1 as exported_ns.Baz; // error: number ~> string
            ^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- exported.js:36:1

Cannot cast `1` to `Baz2` because number [1] is incompatible with string [2]. [incompatible-cast]

   exported.js:36:1
   36| 1 as exported_ns.Baz2; // error: number ~> string
       ^ [1]

References:
   exported.js:36:6
   36| 1 as exported_ns.Baz2; // error: number ~> string
            ^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- exported.js:37:1

Cannot cast `1` to `Baz3` because number [1], a primitive, cannot be used as a subtype of `Baz3` [2]. You can wrap it in
`new Number(...))` to turn it into an object and attempt to use it as a subtype of an interface. [incompatible-type]

   exported.js:37:1
   37| 1 as exported_ns.Baz3; // error: number ~> interface {}
       ^ [1]

References:
   exported.js:37:6
   37| 1 as exported_ns.Baz3; // error: number ~> interface {}
            ^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- exported.js:38:1

Cannot cast `exported_ns.B.C` to empty because `B` [1] is incompatible with empty [2]. [incompatible-cast]

   exported.js:38:1
   38| exported_ns.B.C as empty; // error: enum ~> empty
       ^^^^^^^^^^^^^^^

References:
   exported.js:8:8
    8|   enum B { C, D }
              ^ [1]
   exported.js:38:20
   38| exported_ns.B.C as empty; // error: enum ~> empty
                          ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ exported.js:39:13

Cannot get `exported_ns.React` because property `React` is missing in namespace exported_ns [1]. [prop-missing]

   exported.js:39:13
   39| exported_ns.React; // error: prop-missing
                   ^^^^^

References:
   exported.js:1:19
    1| declare namespace exported_ns {
                         ^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- exported.js:40:1

Cannot cast `exported_ns.CONSTANT` to empty because `void` (due to access of non-existent property `CONSTANT`) [1] is
incompatible with empty [2]. [incompatible-cast]

   exported.js:40:1
   40| exported_ns.CONSTANT as empty; // prop-missing
       ^^^^^^^^^^^^^^^^^^^^ [1]

References:
   exported.js:40:25
   40| exported_ns.CONSTANT as empty; // prop-missing
                               ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ exported.js:40:13

Cannot get `exported_ns.CONSTANT` because property `CONSTANT` is missing in namespace exported_ns [1]. [prop-missing]

   exported.js:40:13
   40| exported_ns.CONSTANT as empty; // prop-missing
                   ^^^^^^^^

References:
   exported.js:1:19
    1| declare namespace exported_ns {
                         ^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- libdef_test.js:1:1

Cannot cast `ns_v.a` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   libdef_test.js:1:1
   1| ns_v.a as empty; // error: string ~> empty
      ^^^^^^

References:
   flow-typed/namespaces.js:2:20
   2|   declare const a: string;
                         ^^^^^^ [1]
   libdef_test.js:1:11
   1| ns_v.a as empty; // error: string ~> empty
                ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- libdef_test.js:2:1

Cannot cast `ns_v.b` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   libdef_test.js:2:1
   2| ns_v.b as empty; // error: string ~> empty
      ^^^^^^

References:
   flow-typed/namespaces.js:5:20
   5|   declare const b: string;
                         ^^^^^^ [1]
   libdef_test.js:2:11
   2| ns_v.b as empty; // error: string ~> empty
                ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- libdef_test.js:3:1

Cannot resolve name `ns_t`. [cannot-resolve-name]

   3| ns_t; // error: it's a type only namespace
      ^^^^


Error ----------------------------------------------------------------------------------------------- libdef_test.js:4:1

Cannot cast `1` to `T1` because number [1] is incompatible with string [2]. [incompatible-cast]

   libdef_test.js:4:1
   4| 1 as ns_t.T1; // error: number ~> string
      ^ [1]

References:
   libdef_test.js:4:6
   4| 1 as ns_t.T1; // error: number ~> string
           ^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- libdef_test.js:5:1

Cannot cast `ns_v_and_then_t` to empty because namespace ns_v_and_then_t [1] is incompatible with empty [2].
[incompatible-cast]

   libdef_test.js:5:1
    5| ns_v_and_then_t as empty; // error: value namespace ~> empty
       ^^^^^^^^^^^^^^^

References:
   flow-typed/namespaces.js:17:19
   17| declare namespace ns_v_and_then_t {
                         ^^^^^^^^^^^^^^^ [1]
   libdef_test.js:5:20
    5| ns_v_and_then_t as empty; // error: value namespace ~> empty
                          ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- libdef_test.js:6:1

Cannot cast `ns_t_and_then_v` to empty because namespace ns_t_and_then_v [1] is incompatible with empty [2].
[incompatible-cast]

   libdef_test.js:6:1
    6| ns_t_and_then_v as empty; // error: value namespace ~> empty
       ^^^^^^^^^^^^^^^

References:
   flow-typed/namespaces.js:20:19
   20| declare namespace ns_t_and_then_v {
                         ^^^^^^^^^^^^^^^ [1]
   libdef_test.js:6:20
    6| ns_t_and_then_v as empty; // error: value namespace ~> empty
                          ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- libdef_test.js:8:14

Cannot get `non_ns_value.b` because property `b` is missing in `String` [1]. [prop-missing]

   libdef_test.js:8:14
    8| non_ns_value.b as empty; // error: value namespace ~> empty
                    ^

References:
   flow-typed/namespaces.js:30:29
   30| declare const non_ns_value: string;
                                   ^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- libdef_test.js:9:1

Cannot resolve name `non_ns_type`. [cannot-resolve-name]

   9| non_ns_type; // error: it's a type
      ^^^^^^^^^^^


Error --------------------------------------------------------------------------------- type_only_react_namespace.js:3:3

Cannot resolve name `React`. [cannot-resolve-name]

   3|   React; // error
        ^^^^^


Error --------------------------------------------------------------------------------- type_only_react_namespace.js:5:3

Cannot cast `Array` to `Node` because: [incompatible-cast]
 - Either class `Array` [1] is incompatible with `React.Element` [2].
 - Or class `Array` [1] is incompatible with `React.Portal` [3].
 - Or property `@@iterator` is missing in class `Array` [1] but exists in `$Iterable` [4].

   type_only_react_namespace.js:5:3
     5|   Array as React.Node; // error
          ^^^^^

References:
   <BUILTINS>/core.js:951:15
   951| declare class Array<T> extends $ReadOnlyArray<T> {
                      ^^^^^ [1]
   <BUILTINS>/react.js:21:5
    21|   | React$Element<any>
            ^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:22:5
    22|   | React$Portal
            ^^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:23:5
    23|   | Iterable<?React$Node>;
            ^^^^^^^^^^^^^^^^^^^^^ [4]


Error -------------------------------------------------------------------------------- type_only_react_namespace.js:12:3

Cannot cast `Array` to `Node` because: [incompatible-cast]
 - Either class `Array` [1] is incompatible with `React.Element` [2].
 - Or class `Array` [1] is incompatible with `React.Portal` [3].
 - Or property `@@iterator` is missing in class `Array` [1] but exists in `$Iterable` [4].

   type_only_react_namespace.js:12:3
    12|   Array as React.Node; // error
          ^^^^^

References:
   <BUILTINS>/core.js:951:15
   951| declare class Array<T> extends $ReadOnlyArray<T> {
                      ^^^^^ [1]
   <BUILTINS>/react.js:21:5
    21|   | React$Element<any>
            ^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:22:5
    22|   | React$Portal
            ^^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:23:5
    23|   | Iterable<?React$Node>;
            ^^^^^^^^^^^^^^^^^^^^^ [4]


Error ----------------------------------------------------------------------------------------------- typing_test.js:7:1

Cannot cast `both_type_and_value.bar1` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   typing_test.js:7:1
   7| both_type_and_value.bar1 as empty; // error: number ~> empty
      ^^^^^^^^^^^^^^^^^^^^^^^^

References:
   typing_test.js:2:30
   2|   declare export const bar1: number;
                                   ^^^^^^ [1]
   typing_test.js:7:29
   7| both_type_and_value.bar1 as empty; // error: number ~> empty
                                  ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- typing_test.js:8:1

Cannot cast `both_type_and_value.bar2` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   typing_test.js:8:1
   8| both_type_and_value.bar2 as empty; // error: boolean ~> empty
      ^^^^^^^^^^^^^^^^^^^^^^^^

References:
   typing_test.js:3:30
   3|   declare export const bar2: boolean;
                                   ^^^^^^^ [1]
   typing_test.js:8:29
   8| both_type_and_value.bar2 as empty; // error: boolean ~> empty
                                  ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- typing_test.js:9:29

Cannot resolve name `foo`. [cannot-resolve-name]

   9| both_type_and_value.bar1 as foo.Baz; // error: number ~> string
                                  ^^^


Error ---------------------------------------------------------------------------------------------- typing_test.js:9:29

Cannot use `Baz` as a type because it is an `any`-typed value. Type `Baz` properly, so it is no longer `any`-typed, to
use it as an annotation. [value-as-type]

   9| both_type_and_value.bar1 as foo.Baz; // error: number ~> string
                                  ^^^^^^^


Error ---------------------------------------------------------------------------------------------- typing_test.js:12:3

Cannot use declare module.exports statements with in `declare namespace`. The statement will be ignored.
[unsupported-syntax]

   12|   declare module.exports: {foo: string}; // unsupported
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------------- typing_test.js:15:36

Cannot get `unsupported_declare_module_exports.foo` because property `foo` is missing in namespace
unsupported_declare_module_exports [1]. [prop-missing]

   typing_test.js:15:36
   15| unsupported_declare_module_exports.foo; // prop-missing because `declare module.exports` is ignored
                                          ^^^

References:
   typing_test.js:11:19
   11| declare namespace unsupported_declare_module_exports {
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- typing_test.js:23:3

Cannot use if statements with in `declare namespace`. The statement will be ignored. [unsupported-syntax]

   23|   if (true) {} // error
         ^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------- typing_test.js:24:3

Cannot use import declaration statements with in `declare namespace`. The statement will be ignored.
[unsupported-syntax]

   24|   import React from 'react'; // unsupported
         ^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------- typing_test.js:26:1

Cannot cast `unsupported_statements.a` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   typing_test.js:26:1
   26| unsupported_statements.a as empty; // error: number ~> empty
       ^^^^^^^^^^^^^^^^^^^^^^^^

References:
   typing_test.js:18:20
   18|   declare const a: number;
                          ^^^^^^ [1]
   typing_test.js:26:29
   26| unsupported_statements.a as empty; // error: number ~> empty
                                   ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- typing_test.js:28:1

Cannot cast `unsupported_statements.B.D` to empty because `B` [1] is incompatible with empty [2]. [incompatible-cast]

   typing_test.js:28:1
   28| unsupported_statements.B.D as empty; // error: enum ~> empty
       ^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   typing_test.js:19:8
   19|   enum B {
              ^ [1]
   typing_test.js:28:31
   28| unsupported_statements.B.D as empty; // error: enum ~> empty
                                     ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- typing_test.js:31:1

Cannot cast `exported_ns.bar1` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   typing_test.js:31:1
   31| exported_ns.bar1 as empty; // error: number ~> empty
       ^^^^^^^^^^^^^^^^

References:
   exported.js:2:30
    2|   declare export const bar1: number;
                                    ^^^^^^ [1]
   typing_test.js:31:21
   31| exported_ns.bar1 as empty; // error: number ~> empty
                           ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- typing_test.js:32:1

Cannot cast `exported_ns.bar2` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   typing_test.js:32:1
   32| exported_ns.bar2 as empty; // error: boolean ~> empty
       ^^^^^^^^^^^^^^^^

References:
   exported.js:3:23
    3|   declare const bar2: boolean;
                             ^^^^^^^ [1]
   typing_test.js:32:21
   32| exported_ns.bar2 as empty; // error: boolean ~> empty
                           ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- typing_test.js:33:1

Cannot cast `exported_ns.bar3` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   typing_test.js:33:1
   33| exported_ns.bar3 as empty; // error: string ~> empty
       ^^^^^^^^^^^^^^^^

References:
   exported.js:4:21
    4|   declare var bar3: string;
                           ^^^^^^ [1]
   typing_test.js:33:21
   33| exported_ns.bar3 as empty; // error: string ~> empty
                           ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- typing_test.js:34:1

Cannot cast `exported_ns.f(...)` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   typing_test.js:34:1
   34| exported_ns.f(3) as empty; // error: number ~> empty
       ^^^^^^^^^^^^^^^^

References:
   exported.js:6:31
    6|   declare function f(number): number;
                                     ^^^^^^ [1]
   typing_test.js:34:21
   34| exported_ns.f(3) as empty; // error: number ~> empty
                           ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- typing_test.js:35:1

Cannot cast `1` to `Baz` because number [1] is incompatible with string [2]. [incompatible-cast]

   typing_test.js:35:1
   35| 1 as exported_ns.Baz; // error: number ~> string
       ^ [1]

References:
   typing_test.js:35:6
   35| 1 as exported_ns.Baz; // error: number ~> string
            ^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- typing_test.js:36:1

Cannot cast `1` to `Baz2` because number [1] is incompatible with string [2]. [incompatible-cast]

   typing_test.js:36:1
   36| 1 as exported_ns.Baz2; // error: number ~> string
       ^ [1]

References:
   typing_test.js:36:6
   36| 1 as exported_ns.Baz2; // error: number ~> string
            ^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- typing_test.js:37:1

Cannot cast `1` to `Baz3` because number [1], a primitive, cannot be used as a subtype of `Baz3` [2]. You can wrap it in
`new Number(...))` to turn it into an object and attempt to use it as a subtype of an interface. [incompatible-type]

   typing_test.js:37:1
   37| 1 as exported_ns.Baz3; // error: number ~> interface {}
       ^ [1]

References:
   typing_test.js:37:6
   37| 1 as exported_ns.Baz3; // error: number ~> interface {}
            ^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- typing_test.js:38:1

Cannot cast `exported_ns.B.C` to empty because `B` [1] is incompatible with empty [2]. [incompatible-cast]

   typing_test.js:38:1
   38| exported_ns.B.C as empty; // error: enum ~> empty
       ^^^^^^^^^^^^^^^

References:
   exported.js:8:8
    8|   enum B { C, D }
              ^ [1]
   typing_test.js:38:20
   38| exported_ns.B.C as empty; // error: enum ~> empty
                          ^^^^^ [2]


Error --------------------------------------------------------------------------------------------- typing_test.js:39:13

Cannot get `exported_ns.React` because property `React` is missing in namespace exported_ns [1]. [prop-missing]

   typing_test.js:39:13
   39| exported_ns.React; // error: prop-missing
                   ^^^^^

References:
   exported.js:1:19
    1| declare namespace exported_ns {
                         ^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- typing_test.js:40:1

Cannot cast `exported_ns.CONSTANT` to empty because `void` (due to access of non-existent property `CONSTANT`) [1] is
incompatible with empty [2]. [incompatible-cast]

   typing_test.js:40:1
   40| exported_ns.CONSTANT as empty; // error: prop-missing
       ^^^^^^^^^^^^^^^^^^^^ [1]

References:
   typing_test.js:40:25
   40| exported_ns.CONSTANT as empty; // error: prop-missing
                               ^^^^^ [2]


Error --------------------------------------------------------------------------------------------- typing_test.js:40:13

Cannot get `exported_ns.CONSTANT` because property `CONSTANT` is missing in namespace exported_ns [1]. [prop-missing]

   typing_test.js:40:13
   40| exported_ns.CONSTANT as empty; // error: prop-missing
                   ^^^^^^^^

References:
   exported.js:1:19
    1| declare namespace exported_ns {
                         ^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- typing_test.js:44:1

Cannot use type `exported_ns_type_only` [1] as a value. Types are erased and don't exist at runtime. If the exported
binding can also be used as a value, try importing it using `import exported_ns_type_only` instead of
`import type exported_ns_type_only` and `import {exported_ns_type_only}` instead of
`import type {exported_ns_type_only}`. [type-as-value]

   typing_test.js:44:1
   44| exported_ns_type_only; exported_ns_type_only2; // error: type-as-value
       ^^^^^^^^^^^^^^^^^^^^^

References:
   typing_test.js:43:51
   43| import type {type_only as exported_ns_type_only2, exported_ns_type_only} from './exported';
                                                         ^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- typing_test.js:44:24

Cannot use type `exported_ns_type_only2` [1] as a value. Types are erased and don't exist at runtime. If the exported
binding can also be used as a value, try importing it using `import exported_ns_type_only2` instead of
`import type exported_ns_type_only2` and `import {exported_ns_type_only2}` instead of
`import type {exported_ns_type_only2}`. [type-as-value]

   typing_test.js:44:24
   44| exported_ns_type_only; exported_ns_type_only2; // error: type-as-value
                              ^^^^^^^^^^^^^^^^^^^^^^

References:
   typing_test.js:43:27
   43| import type {type_only as exported_ns_type_only2, exported_ns_type_only} from './exported';
                                 ^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- typing_test.js:48:3

Cannot cast `1` to `B` because number [1] is incompatible with `B` [2]. [incompatible-cast]

   typing_test.js:48:3
   48|   1 as exported_ns_type_only.B; // error: number ~> enum
         ^ [1]

References:
   typing_test.js:48:8
   48|   1 as exported_ns_type_only.B; // error: number ~> enum
              ^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- typing_test.js:50:3

Cannot cast `exported_ns.B.C` to `T` because `B` [1] is incompatible with number [2]. [incompatible-cast]

   typing_test.js:50:3
   50|   exported_ns.B.C as exported_ns_type_only2.T; // error: enum ~> number
         ^^^^^^^^^^^^^^^

References:
   exported.js:8:8
    8|   enum B { C, D }
              ^ [1]
   typing_test.js:50:22
   50|   exported_ns.B.C as exported_ns_type_only2.T; // error: enum ~> number
                            ^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- typing_test.js:55:3

Cannot use type-only namespace `type_only` [1] as a value. Type-only namespaces are erased and don't exist at runtime.
[type-as-value]

   typing_test.js:55:3
   55|   type_only; // error: type-as-value
         ^^^^^^^^^

References:
   typing_test.js:52:21
   52|   declare namespace type_only {
                           ^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- typing_test.js:57:3

Cannot cast `1` to `Bar` because number [1] is incompatible with string [2]. [incompatible-cast]

   typing_test.js:57:3
   57|   1 as type_only.Bar; // error: number ~> string
         ^ [1]

References:
   typing_test.js:57:8
   57|   1 as type_only.Bar; // error: number ~> string
              ^^^^^^^^^^^^^ [2]



Found 66 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
